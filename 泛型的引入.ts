(() => {
  function s(x: number[]): number[] {
    return new Array().concat(x);
  }
  s([1, 2, 3, 4]);
  // console.log(s(["2", "1", "12"])); // 不支持传字符串
  // 这种方式的缺点在于：只能传数字类型的数组，无法扩展其他类型
  function s1(x: any[]): any[] {
    return new Array().concat(x);
  }
  var arr = s1(["2", "1", "12"])
  // arr[0].split // 因为无法确定arr[0]的类型，所以split没有方法提示

  /**
   * 引出泛型概念：说白了就是可以传入任意类型(有了any的效果)，也能马上确定类型(也有提示了)
   * 软件工程中，我们不仅要创造定义良好的API，同时也要考虑可重用性
   * 就像组件不仅能够支持当前的数据类型，同时也能够支持未来数据类型
   * 泛型：
   * 在定义函数、接口、类时不能预先明确要使用的数据类型，而是在使用时通过传入类型来确定数据类型
   * 作用：
   * 使函数、接口、类同时支持多种类型，而不用写繁琐的重载列表
   * 增强代码可读性
   * 灵活控制类型之间的约束
   */
  
})();
